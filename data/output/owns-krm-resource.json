{
  "id": "owns-krm-resource",
  "tokens": 430,
  "data": "The Owns resource filter identifies which KRM resources are children of the for resource instance. You could also say these are created or lifecycled as a result of the parent resource (the for resource in this case)The sdk defines different types of own resources:- childRemote:  - the current/parent fn/controller defines the spec attributes of the child resource, but another child function/controller takes care of the actuation that are related to this KRM resource. Like updating the status and are deriving other child resources acting as a parent.  - A remote function will act upon this KRM through a for filter and will update the status.  - The deletion is taken care of by the remote resource by acting on the delete annotiation set by the sdk.  - An example use case is e.g. the interface-fn that needs an IP. The interface-fn is the parent that creates an IPAllocation on which a downstream function/controller acts and fills out the IP Allocation- childRemoteCondition:  - the current/parent fn/controller defines the KRM header attributes of the child resource, but another function/controller takes care of the spec and or status that are related to this KRM resource.  - A remote function will act upon this KRM through a for filter and will update the status  - The deletion is take care of by the remote resource by acting on the delete annotiation set by the sdk  - The typical usage pattern is when the parent has insufficient information to define the full spec. E.g. a NAD needs an IP and VLAN for it to be specified fully. So rather than building a half baked CRD the system generates a condition for the child NAD fn/controller to act upon and it will create the Spec within the child function/controller.- childLocal: to be implemented the fn/controller defines the spec locally within the fn/controller.The fn/controller implementation is triggered using the PopulateOwnResourcesFn callback.Each of the own instances are lifecycled by the sdk within the context of the for instance. As such if we have 3 for instance the sdk calls the PopulateOwnResourcesFn callback 3 times"
}